training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
??plot.enet
?train
modFit <- train(CompetitiveStrength ~ ., data = training, method = "lasso")
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
summary(modFit)
modFit$call
modFit$actions
modFit$L1norm
dim(concrete)
modFit$xNames
head(modFit)
?plot.enet
plot.enet(modFit)
plot.enet(modFit, use.color=T)
plot.enet(training, use.color=T)
?modFit
modFit
?enet
modFit <- enet(training, training$CompressiveStrength, normalize=T)
modFit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(modFit$finalModel)
?plot.enet
plot.enet(modFit$finalModel, use.color=T)
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date)  2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("~/Downloads/gaData.csv")
training = dat[year(dat$date)  2011,]
training = dat[year(dat$date) == 2011,]
?year
??year
dat$date
year(dat$date)
year(as.Date(dat$date))
as.Date(dat$date[1])
year(as.Date(dat$date[1]))
as.numeric(format(dat$date, "%Y"))
as.numeric(format(dat$date[1], "%Y"))
as.numeric(format(as.Date(dat$date), "%Y"))
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
bats(tstrain)
?forecast
modFit <- bats(tstrain)
testing = dat[dat$year != 2011, ]
forecast(modFit, testing$visitsTumblr)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
lines(ma(tstrain, order=3), col="red")
lines(ma(tstrain, order=3), col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
accuracy(fcast, tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year != 2011, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
dat$year
summary(dat$year)
dat = read.csv("~/Downloads/gaData.csv")
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
training$year
testing$year
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
plot(tstrain)
plot(tstest)
plot(fcast); lines(tstest, col="blue")
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
plot(tstrain)
plot(tstest)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
accuracy(fcast, tstest)
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = window(ts(training$visitsTumblr), start = 0, end=5)
tstest = window(ts(testing$visitsTumblr), start = 5, end = 10)
plot(tstrain)
plot(tstest)
tstrain <- window(tstrain, start=0, end=length(tstrain))
tstest <- window(tstest, start=length(tstrain), end=length(tstrain) + length(tstest))
plot(tstrain)
plot(tstest)
plot(tstrain)
plot(tstest)
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
tstrain <- window(tstrain, start=0, end=length(tstrain))
plot(tstrain)
tstest <- window(tstest, start=length(tstrain), end=length(tstrain) + length(tstest))
plot(tstest)
plot(tstrain)
plot(tstest)
lines(ma(tstrain, order=3), col="red")
plot(tstrain)
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
plot(fcast); lines(tstest, col="blue")
plot(tstest)
plot(fcast); lines(tstest, col="blue")
plot(tstest)
plot(fcast); lines(tstest, col="blue")
dat = read.csv("~/Downloads/gaData.csv")
dat$date = as.Date(dat$date)
dat$year = as.numeric(format(as.Date(dat$date), "%Y"))
training = dat[dat$year == 2011,]
testing = dat[dat$year == 2012, ]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
?window
tstrain <- window(tstrain)
plot(tstrain)
training$visitsTumblr
lines(ma(tstrain, order=3), col="red")
fcast <- forecast(bats(tstrain))
summary(fcast)
plot(tstest)
summary(fcast)
fcast$Forecasts
fcast$lower
sum(tstest >= fcast$lower && tstest <= fcast$higher)
dim(tstest)
length(tstest)
length(fcast$lower)
dim(fcast$lower)
dim(fcast$lower[[2]])
dim(fcast$lower[2])
fcast$lower[1]
fcast$lower[1,]
fcast$lower[,1]
fcast$lower[,2]
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
length(tstest)
length(fcast$lower[,2])
?forecast
fcast <- forecast(bats(tstrain), h = length(tstest))
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
length(tstest)
length(fcast$lower[,2])
sum(tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
comp <- tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2]
?sum
sum(comp, na.rm=T)
head(sum)
head(comp)
comp
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
tstest >= fcast$lower[,2]
sum(tstest >= fcast$lower[,2])
sum(tstest <= fcast$higher[,2])
fcast$higher[,2]
fcast$higher
fcast$upper[,2]
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$higher[,2])
head(comp)
comp <- (tstest >= fcast$lower[,2] && tstest <= fcast$upper[,2])
sum(comp)
comp
tstest <= fcast$upper[,2]
sum(tstest >= fcast$lower[,2])
sum(tstest <= fcast$upper[,2])
sum(tstest <= fcast$upper[,2]) / 235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- train(CompressiveStrength ~ ., data = concrete, method="e1071")
install.packages("e1071")
install.packages("e1071")
library(e1071)
modFit <- train(CompressiveStrength ~ ., data = concrete, method="e1071")
modFit <- train(CompressiveStrength ~ ., data = concrete, method="svm")
?train
modFit <- train(CompressiveStrength ~ ., data = concrete, method="svmLinear")
?svm
modFit <- svm(CompressiveStrength ~ ., data = training)
predict(modFit, testing)
summary(predict(modFit, testing))
predict(modFit, testing)
pred <- predict(modFit, testing)
summary(pred)
accuracy(pred, testing)
RMSE(pred, testing)
set.seed(325)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, testing)
RMSE(pred, testing)
?RMSE
sqrt
sqrt(415.1742)
415.1742 / length(testing)
RMSE(pred, testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict(modFit, testing)
RMSE(pred, testing)
?svm
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
?predict.svm
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
pred <- predict.svm(modFit, testing)
View(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, testing)
RMSE(pred, testing)
?predict.svm
pred <- predict.svm {e1071}(modFit, testing)
pred <- predict.svm(modFit, testing)
?predict.svm
pred <- predict.svm(modFit, newdata = testing)
library(e1071)
predict.svm
?predict.svm
pred <- predict(modFit, newdata = testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
pred <- predict.svm(modFit, newdata = testing)
RMSE(pred, testing)
RMSE(predict.svm(modFit, newdata = testing), testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
RMSE(predict(modFit, newdata = testing), testing)
RMSE(predict_svm(modFit, newdata = testing), testing)
RMSE(predictsvm(modFit, newdata = testing), testing)
install.packages("e1071")
install.packages("e1071")
RMSE(predict.svm(modFit, newdata = testing), testing)
predict.svm(modFit, newdata = testing)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modFit <- svm(CompressiveStrength ~ ., data = training)
RMSE(svm.predict(modFit, newdata = testing), testing)
RMSE(predict(modFit, newdata = testing), testing)
modFit <- svm(CompressiveStrength ~ ., data = training)
??predict
?predict
e1071.predict
e1071::predict
e1071::predict.svm
e1071::predict.svm()
e1071::predict.svm(modFit, testing)
e1071::predict.svm(modFit, newdata = testing)
stats::predict
e1071::predict
e1071::predict.svm
lm
colSums
dgamma
predict
?lm
?dgamma
?predict
dataset(Titanic)
datasets(Titanic)
require(graphics)
dataset(Titanic)
data(Titanic)
summary(Titanic)
deployApp()
getwd()
setwd("/Users//thanhtnguyen/Coursera//DevelopingDataProduct")
setwd("/Users//thanhtnguyen/Coursera//DevelopingDataProduct/Ass")
deployApp()
runApp()
setwd("/Users/thanhtnguyen/Coursera/DevelopingDataProduct/Ass")
library(e1071)
library(shiny)
library(caret)
library(RCurl)
# Load the Titanic dataset
if (file.exists('train.csv')) { # The file is in local
Titanic = read.csv('train.csv')
} else {
url <- getURL('https://raw.githubusercontent.com/R-R-/CourseraDevelopingDataProduct/master/train.csv')
Titanic = read.csv(text = url)
}
goodColumnsNoLabel <- c("Pclass", "Sex", "Age", "Parch")
goodColumns <- c("Survived", goodColumnsNoLabel)
Titanic <- Titanic[, goodColumns]
Titanic$Pclass <- factor(Titanic$Pclass)
Titanic$Survived <- factor(Titanic$Survived)
Titanic$Parch <- factor(Titanic$Parch)
# Create a prediction model with caret
modelFit <- train(Survived ~ ., data = Titanic, method = "glm")
# Our predict function
makePredict <- function (age, type, sex, parch) {
prediction <- predict(modelFit, data.frame(Age=age, Pclass=type, Sex=sex, Parch=parch))
dice <- runif(1, 0, 1.0)
if (dice < 0.25) {
prefix <- "We predict that you will"
} else if (dice < 0.50) {
prefix <- "You will likely"
} else if (dice < 0.75) {
prefix <- "There is a high chance that you will"
} else {
prefix <- "Our data suggest that you will"
}
if (prediction == 0) {
paste(prefix, "not survive :(")
} else {
paste(prefix, "survive")
}
}
# Create shiny server
shinyServer(
function (input, output) {
output$age <- renderPrint({input$age})
output$type <- renderPrint({input$type})
output$sex <- renderPrint({input$sex})
output$survive <- renderText({
if (input$goButton > 0) {
isolate(makePredict(input$age, input$type, input$sex, input$parch))
} else {
"Please enter your information and click Submit"
}
})
}
)
runApp()
library(shinyapps)
deployApp()
runApp()
runApp()
deployApp()
publish(title = 'Coursera_DevelopingDataProducts', 'index.html', host = 'rpubs')
library(slidify)
install.packages("slidify")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
```{r echo=F}
library(slidify)
publish(title = 'Coursera - Developing Data Product', 'index.html', host = 'rpubs')
slidify("index.Rmd")
author("slides")
User can select their own scenario and our server will make predictions for them
Titanic <- Titanic[, goodColumns]
========================================================
---
;
author: Nguyen Thanh Trung
hitheme    : tomorrow
slidify("index.Rmd")
slidify("index.Rmd")
browser("index.html")
q
quit
:q
browseURL("index.html")
browser("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(title = 'Titanic Survival Predictions', 'index.html', host = 'rpubs')
slidify("index.Rmd")
browseURL("index.html")
getwd()
publish(user = "ngthanhtrung23@gmail.com", repo = "CourseraDevelopingDataProductSlides")
slidify("index.Rmd")
publish(user = "ngthanhtrung23@gmail.com", repo = "CourseraDevelopingDataProductSlides")
publish(user = "R-R-", repo = "CourseraDevelopingDataProductSlides")
publish(user = "ngthanhtrung23", repo = "CourseraDevelopingDataProductSlides")
publish(user = "ngthanhtrung23", repo = "CourseraDevelopingDataProductSlides")
publish(user = "ngthanhtrung23", repo = "CourseraTitanicSurvivalSlides")
